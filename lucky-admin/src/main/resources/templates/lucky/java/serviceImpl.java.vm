package ${package.ServiceImpl};

import ${package.Entity}.${entity};
import ${package.Mapper}.${table.mapperName};
#if(${generateService})
import ${package.Service}.${table.serviceName};
#end
import ${superServiceImplClassPackage};
import org.springframework.stereotype.Service;
## 这里是新增的包
import java.util.List;
import cn.anlucky.luckyadmin.utils.StringUtils;
## 这里设置模板的变量
## 表相关
#set($entityName = "${table.entityName}") ## 转为驼峰的实体名称
#set($tableName = "${table.name}") ## 表的原始名称
#set($tableComment = "${table.comment}") ## 表注释
#set($tableEntityPath = "${table.entityPath}")##小驼峰表名称
## 表字段相关
#foreach($field in ${table.fields})
    ## ${field.keyFlag} // 主键标识 true false
    ## ${field.keyIdentityFlag} // 是否自增标识 true false
    ## ${field.fill} fill  // 填充策略 如果没有填充策略泽输出 ${field.fill} 否则输出 INSERT_UPDATE INSERT UPDATE
    #if(${field.keyFlag})## 如果是主键
        #set($tableKeyFieldName = "${field.name}") ## 表主键原始字段名
        #set($tableKeyFieldComment = "${field.comment}")  ## 主键的字段注释
        #set($tableKeyJavaType = "${field.propertyType}") ## 主键Java类型 Long Integer String
        #set($tableKeyJavaName = "${field.propertyName}") ## 主键的属性名称 如字段名为 user_name 属性名为userName
        #set($tableKeyJavaBigName = "${field.capitalName}")## 主键的首字母大写的首字母大写属性名 如字段名为 user_name 属性名为UserName
    #end
#end
/**
 * $!{table.comment} 服务实现类
 *
 * @author ${author}
 * @since ${date}
 */
@Service
#if(${kotlin})
open class ${table.serviceImplName} : ${superServiceImplClass}<${table.mapperName}, ${entity}>()#if(${generateService}), ${table.serviceName}#end {

}
#else
public class ${table.serviceImplName} extends ${superServiceImplClass}<${table.mapperName}, ${entity}>#if(${generateService}) implements ${table.serviceName}#end {

        /**
         * 条件分页查询$!{tableComment}信息
         * @param ${tableEntityPath}
         * @return List<${entity}>
         */
        public List<${entity}> pageByParams(${entity} ${tableEntityPath}){
            if(${tableEntityPath} == null){
                return this.list();
            }
            LambdaQueryWrapper<${entity}> wrapper = new LambdaQueryWrapper<>();
#foreach($field in ${table.fields})
#set($tableKeyNameJava = "${field.capitalName}")## Id
#set($tablekeyName = "${field.name}")## 字段名 id
#set($tableKeyComment = "${table.entityName}")## 字段注释 用户名
#set($tableKeyType = "${field.propertyType}")## 字段Java类型 Long
#set($getFuncation = "get${field.capitalName}()")
#if((!${field.keyFlag})&&(!${field.logicDeleteField})&&(${field.fill}!="INSERT_UPDATE"&&${field.fill}!="INSERT"&&${field.fill}!="UPDATE"))
#if(${tableKeyType} == 'String')
            wrapper.eq(StringUtils.isNotBlank(${tableEntityPath}.${getFuncation}), ${entity}::get${tableKeyNameJava}, ${tableEntityPath}.${getFuncation});
#end
#end
#end
            return this.list(wrapper);
        }
}
#end
